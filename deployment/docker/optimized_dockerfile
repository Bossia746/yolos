# 优化的多阶段Dockerfile for YOLOS项目
# 修复容器化部署问题，改进依赖管理和构建效率

# ============================================================================
# 基础镜像阶段 - 统一的基础环境
# ============================================================================
FROM python:3.10-slim as base

# 设置环境变量
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# 安装系统依赖 - 优化包管理
RUN apt-get update && apt-get install -y --no-install-recommends \
    # 构建工具
    build-essential \
    cmake \
    pkg-config \
    # 版本控制和网络工具
    git \
    wget \
    curl \
    # OpenCV依赖
    libopencv-dev \
    python3-opencv \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    # 图像处理库
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    # GStreamer支持
    libgstreamer1.0-0 \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    gstreamer1.0-tools \
    # 其他必要库
    libhdf5-dev \
    libatlas-base-dev \
    liblapack-dev \
    libblas-dev \
    libffi-dev \
    libssl-dev \
    # 清理缓存
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 升级pip和安装基础Python包
RUN pip install --upgrade pip setuptools wheel

# 创建非root用户
RUN groupadd -r yolos && useradd -r -g yolos -m yolos

# 设置工作目录
WORKDIR /app

# ============================================================================
# 依赖安装阶段 - 优化依赖管理
# ============================================================================
FROM base as dependencies

# 复制依赖文件
COPY requirements.txt ./
COPY config/requirements.txt ./config_requirements.txt

# 分层安装依赖以优化缓存
# 1. 安装核心依赖
RUN pip install --no-cache-dir \
    numpy==1.24.3 \
    opencv-python==4.8.0.74 \
    Pillow==10.0.0 \
    torch==2.0.1 \
    torchvision==0.15.2 \
    torchaudio==2.0.2

# 2. 安装YOLO相关依赖
RUN pip install --no-cache-dir \
    ultralytics==8.0.120 \
    onnx==1.14.0 \
    onnxruntime==1.15.1

# 3. 安装Web框架依赖
RUN pip install --no-cache-dir \
    flask==2.3.2 \
    fastapi==0.100.0 \
    uvicorn==0.22.0 \
    gunicorn==20.1.0

# 4. 安装其他依赖
RUN pip install --no-cache-dir -r requirements.txt

# ============================================================================
# 开发环境阶段
# ============================================================================
FROM dependencies as development

# 安装开发工具
RUN pip install --no-cache-dir \
    pytest==7.4.0 \
    pytest-cov==4.1.0 \
    black==23.7.0 \
    flake8==6.0.0 \
    mypy==1.4.1 \
    pre-commit==3.3.3 \
    jupyter==1.0.0 \
    ipython==8.14.0 \
    debugpy==1.6.7

# 复制源代码
COPY . .

# 安装包（开发模式）
RUN pip install -e ".[dev]"

# 创建必要目录
RUN mkdir -p /app/logs /app/models /app/data /app/temp /app/cache

# 设置权限
RUN chown -R yolos:yolos /app
USER yolos

# 暴露端口
EXPOSE 8000 8888 5678

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# 开发环境启动命令
CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=8000", "--debug"]

# ============================================================================
# 生产环境阶段
# ============================================================================
FROM dependencies as production

# 只复制必要的文件
COPY src/ ./src/
COPY config/ ./config/
COPY web/ ./web/
COPY setup.py pyproject.toml MANIFEST.in ./
COPY main.py ./

# 安装包（生产模式）
RUN pip install --no-cache-dir .

# 创建运行时目录
RUN mkdir -p /app/logs /app/models /app/data /app/temp /app/cache \
    && chmod 755 /app/logs /app/models /app/data /app/temp /app/cache

# 设置权限
RUN chown -R yolos:yolos /app
USER yolos

# 暴露端口
EXPOSE 8000

# 健康检查
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# 生产环境启动命令
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "4", "--timeout", "120", "web.app:app"]

# ============================================================================
# GPU支持阶段
# ============================================================================
FROM nvidia/cuda:11.8-runtime-ubuntu22.04 as gpu

# 设置环境变量
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    DEBIAN_FRONTEND=noninteractive \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility

# 安装Python和系统依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3-pip \
    python3-dev \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    libopencv-dev \
    python3-opencv \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libjpeg-dev \
    libpng-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 创建Python符号链接
RUN ln -sf /usr/bin/python3 /usr/bin/python

# 升级pip
RUN pip install --upgrade pip setuptools wheel

# 创建用户
RUN groupadd -r yolos && useradd -r -g yolos -m yolos

# 设置工作目录
WORKDIR /app

# 安装PyTorch GPU版本
RUN pip install --no-cache-dir \
    torch==2.0.1+cu118 \
    torchvision==0.15.2+cu118 \
    torchaudio==2.0.2+cu118 \
    --index-url https://download.pytorch.org/whl/cu118

# 复制并安装依赖
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# 安装GPU优化库
RUN pip install --no-cache-dir \
    tensorrt==8.6.1 \
    onnxruntime-gpu==1.15.1

# 复制源代码
COPY src/ ./src/
COPY config/ ./config/
COPY web/ ./web/
COPY setup.py pyproject.toml MANIFEST.in ./

# 安装包（GPU支持）
RUN pip install --no-cache-dir ".[gpu]"

# 创建目录
RUN mkdir -p /app/logs /app/models /app/data /app/temp /app/cache

# 设置权限
RUN chown -R yolos:yolos /app
USER yolos

# 暴露端口
EXPOSE 8000

# GPU环境启动命令
CMD ["python", "-m", "web.app"]

# ============================================================================
# 边缘设备阶段（树莓派等）
# ============================================================================
FROM python:3.10-slim as edge

# 设置环境变量
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1

# 安装边缘设备特定依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libopencv-dev \
    python3-opencv \
    libatlas-base-dev \
    libhdf5-dev \
    libhdf5-serial-dev \
    libjasper-dev \
    libqtgui4 \
    libqt4-test \
    # ARM优化库
    libblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    gfortran \
    && rm -rf /var/lib/apt/lists/*

# 创建用户
RUN groupadd -r yolos && useradd -r -g yolos -m yolos

# 设置工作目录
WORKDIR /app

# 安装轻量级依赖
COPY requirements.txt ./
RUN pip install --no-cache-dir \
    numpy==1.24.3 \
    opencv-python-headless==4.8.0.74 \
    Pillow==10.0.0 \
    # 轻量级推理引擎
    onnxruntime==1.15.1 \
    tflite-runtime==2.13.0

# 复制源代码
COPY src/ ./src/
COPY config/ ./config/
COPY setup.py pyproject.toml MANIFEST.in ./

# 安装包（边缘设备支持）
RUN pip install --no-cache-dir ".[edge]"

# 创建目录
RUN mkdir -p /app/logs /app/models /app/data /app/temp

# 设置权限
RUN chown -R yolos:yolos /app
USER yolos

# 暴露端口
EXPOSE 8000

# 边缘设备启动命令
CMD ["python", "-m", "src.embedded.main"]

# ============================================================================
# 测试阶段
# ============================================================================
FROM development as testing

# 安装测试依赖
RUN pip install --no-cache-dir \
    pytest-xdist==3.3.1 \
    pytest-mock==3.11.1 \
    coverage==7.2.7 \
    locust==2.15.1

# 复制测试文件
COPY tests/ ./tests/

# 运行测试
RUN python -m pytest tests/ -v --tb=short

# 测试命令
CMD ["python", "-m", "pytest", "tests/", "-v"]