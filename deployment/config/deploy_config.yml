# YOLOS 部署配置文件
# 支持多环境部署、回滚、监控和通知

# 环境配置
environments:
  development:
    docker_compose_file: "deployment/docker/docker-compose.optimized.yml"
    health_check_timeout: 120
    rollback_on_failure: true
    notification_enabled: false
    backup_before_deploy: false
    run_tests: true
    parallel_deployment: false
    max_deployment_time: 600
    
  staging:
    docker_compose_file: "deployment/docker/docker-compose.optimized.yml"
    health_check_timeout: 180
    rollback_on_failure: true
    notification_enabled: true
    backup_before_deploy: true
    run_tests: true
    parallel_deployment: false
    max_deployment_time: 900
    
  production:
    docker_compose_file: "deployment/docker/docker-compose.optimized.yml"
    health_check_timeout: 300
    rollback_on_failure: true
    notification_enabled: true
    backup_before_deploy: true
    run_tests: true
    parallel_deployment: true
    max_deployment_time: 1200

# 服务配置
services:
  yolos-app:
    health_endpoint: "http://localhost:8000/health"
    startup_time: 60
    critical: true
    dependencies: ["postgres", "redis"]
    
  yolos-web:
    health_endpoint: "http://localhost:8080/"
    startup_time: 30
    critical: false
    dependencies: ["yolos-app"]
    
  postgres:
    health_command: "pg_isready -U yolos"
    startup_time: 30
    critical: true
    dependencies: []
    
  redis:
    health_command: "redis-cli ping"
    startup_time: 10
    critical: true
    dependencies: []
    
  nginx:
    health_endpoint: "http://localhost:80/health"
    startup_time: 15
    critical: false
    dependencies: ["yolos-app", "yolos-web"]
    
  prometheus:
    health_endpoint: "http://localhost:9090/-/healthy"
    startup_time: 20
    critical: false
    dependencies: []
    
  grafana:
    health_endpoint: "http://localhost:3000/api/health"
    startup_time: 25
    critical: false
    dependencies: ["prometheus"]

# 部署策略配置
deployment_strategies:
  # 蓝绿部署
  blue_green:
    enabled: false
    switch_timeout: 60
    health_check_interval: 10
    max_switch_attempts: 3
    
  # 滚动更新
  rolling_update:
    enabled: true
    batch_size: 1
    batch_interval: 30
    max_unavailable: 1
    health_check_interval: 10
    
  # 重新创建
  recreate:
    enabled: true
    downtime_acceptable: true
    graceful_shutdown_timeout: 30

# Docker配置
docker:
  registry: null  # 私有镜像仓库地址
  build_args:
    BUILDKIT_INLINE_CACHE: "1"
  build_options:
    - "--no-cache"
    - "--pull"
  push_enabled: false
  cleanup_old_images: true
  max_image_age_days: 7

# 通知配置
notifications:
  webhook_url: null
  slack_webhook: null
  email_recipients: []
  
  # 通知模板
  templates:
    success:
      title: "✅ YOLOS部署成功"
      message: "环境: {environment}\n版本: {version}\n耗时: {duration}秒"
      
    failure:
      title: "❌ YOLOS部署失败"
      message: "环境: {environment}\n版本: {version}\n错误: {error}\n回滚: {rollback_status}"
      
    warning:
      title: "⚠️ YOLOS部署警告"
      message: "环境: {environment}\n版本: {version}\n警告: {warnings}"

# 测试配置
testing:
  smoke_tests: true
  integration_tests: false
  performance_tests: false
  
  # 测试超时设置
  timeouts:
    smoke_tests: 120
    integration_tests: 300
    performance_tests: 600
    
  # 测试失败处理
  on_test_failure:
    rollback: true
    notify: true
    continue_deployment: false

# 监控配置
monitoring:
  enabled: true
  prometheus_endpoint: "http://localhost:9090"
  grafana_endpoint: "http://localhost:3000"
  
  # 部署指标收集
  metrics:
    deployment_duration: true
    service_startup_time: true
    health_check_results: true
    rollback_frequency: true
    
  # 告警配置
  alerts:
    deployment_failure: true
    service_down: true
    high_error_rate: true
    performance_degradation: true

# 备份配置
backup:
  enabled: true
  retention_days: 30
  compression: true
  
  # 备份内容
  include:
    - "database"
    - "volumes"
    - "configs"
    - "logs"
    
  # 备份存储
  storage:
    local_path: "deployment/backups"
    remote_url: null
    encryption_enabled: false

# 安全配置
security:
  # 镜像扫描
  image_scanning:
    enabled: false
    scanner: "trivy"  # trivy, clair, anchore
    fail_on_high: false
    fail_on_critical: true
    
  # 密钥管理
  secrets:
    vault_enabled: false
    vault_url: null
    env_file_encryption: false
    
  # 网络安全
  network:
    tls_enabled: true
    certificate_path: null
    private_key_path: null

# 性能配置
performance:
  # 资源限制
  resource_limits:
    cpu_limit: "2"
    memory_limit: "4G"
    
  # 并发配置
  concurrency:
    max_parallel_services: 3
    deployment_workers: 2
    
  # 缓存配置
  caching:
    docker_layer_cache: true
    dependency_cache: true
    build_cache_size: "10G"

# 日志配置
logging:
  level: "INFO"
  format: "json"
  
  # 日志输出
  outputs:
    console: true
    file: true
    syslog: false
    
  # 日志文件配置
  file_config:
    path: "deployment/logs"
    max_size: "100MB"
    max_files: 10
    compress: true
    
  # 结构化日志字段
  fields:
    environment: true
    version: true
    service: true
    timestamp: true
    correlation_id: true

# 高级配置
advanced:
  # 预热配置
  warmup:
    enabled: true
    endpoints:
      - "http://localhost:8000/health"
      - "http://localhost:8080/"
    timeout: 30
    
  # 流量切换
  traffic_switching:
    enabled: false
    strategy: "gradual"  # immediate, gradual
    gradual_percentage: [10, 25, 50, 75, 100]
    switch_interval: 60
    
  # 数据迁移
  data_migration:
    enabled: false
    scripts_path: "deployment/migrations"
    backup_before_migration: true
    
  # 功能开关
  feature_flags:
    canary_deployment: false
    a_b_testing: false
    circuit_breaker: false

# 环境特定覆盖
env_overrides:
  development:
    logging:
      level: "DEBUG"
    testing:
      integration_tests: true
    monitoring:
      alerts:
        deployment_failure: false
        
  production:
    security:
      image_scanning:
        enabled: true
        fail_on_high: true
    backup:
      retention_days: 90
    performance:
      resource_limits:
        cpu_limit: "4"
        memory_limit: "8G"

# 实验性功能
experimental:
  # Kubernetes支持
  kubernetes:
    enabled: false
    namespace: "yolos"
    helm_chart_path: null
    
  # 服务网格
  service_mesh:
    enabled: false
    provider: "istio"  # istio, linkerd, consul
    
  # 边缘部署
  edge_deployment:
    enabled: false
    edge_locations: []
    
  # AI辅助部署
  ai_assistance:
    enabled: false
    model: "gpt-4"
    auto_optimization: false