# Docker Compose configuration for YOLOS project
# Supports development, production, and GPU environments

version: '3.8'

services:
  # Main YOLOS application
  yolos-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: yolos-app
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/src
      - YOLOS_ENV=production
      - YOLOS_LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config:ro
      - ./models:/app/models:ro
      - yolos-logs:/app/logs
      - yolos-data:/app/data
    networks:
      - yolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - postgres

  # Web interface
  yolos-web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: yolos-web
    ports:
      - "8080:8000"
    environment:
      - PYTHONPATH=/app/src
      - YOLOS_ENV=production
      - FLASK_ENV=production
    volumes:
      - ./web:/app/web:ro
      - ./config:/app/config:ro
    networks:
      - yolos-network
    restart: unless-stopped
    depends_on:
      - yolos-app

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: yolos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - yolos-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL for data storage
  postgres:
    image: postgres:15-alpine
    container_name: yolos-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=yolos
      - POSTGRES_USER=yolos
      - POSTGRES_PASSWORD=yolos_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - yolos-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: yolos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - yolos-network
    restart: unless-stopped
    depends_on:
      - yolos-app
      - yolos-web

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: yolos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - yolos-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: yolos-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployments/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployments/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - yolos-network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  yolos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  yolos-logs:
    driver: local
  yolos-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local